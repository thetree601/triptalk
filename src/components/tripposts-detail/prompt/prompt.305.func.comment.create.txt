아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @02-wireframe.mdc
            - @03-ui.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/components/tripposts-detail/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/tripposts-detail/styles.module.css
조건-피그마) 활용할MCP: CursorTalkToFigmaMCP(채널명: daqshn4o)
조건-피그마) 댓글 폼(작성자/비밀번호/내용) 기준 노드ID: 285:32565
조건-파일경로) 구현될 HOOK 파일경로: src/components/tripposts-detail/hooks/index.comment.create.hook.tsx
조건-파일경로) 구현될 TEST 파일경로: src/components/tripposts-detail/tests/index.comment.create.hook.spec.ts

==============================================

핵심요구사항) 병렬처리 구현을 위한 작업 방식 조건
            - 다른 채팅에서 개발중인 파일을 수정 및 삭제 하지 말 것.
            - 테스트 충돌을 방지하기 위해, 빌드테스트, 전체테스트를 하지 말 것.

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 모든 페이지의 로드 식별 조건은 아래를 따를 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            5) 테스트시나리오
                1. /tripposts/[id]에 접속하여 페이지 로드 확인
                2. 하단 유저시나리오에 적절한 테스트시나리오를 생성하여 진행

==============================================
1. 댓글 등록 기능 (폼 + 별점)
==============================================

1-1) 댓글 등록 폼 UI 구성
    - 작성자 입력 박스 (input)
    - 비밀번호 입력 박스 (input type="password")
    - 내용 입력 박스 (textarea, 최대 100자 제한)
    - 세 개의 입력 박스가 순서대로 위에서 아래로 배치되어야 함
    - 기존 단일 textarea를 위의 세 개 입력 박스로 교체
    - 댓글 등록 버튼은 그대로 유지
    - 피그마 레이아웃(채널 daqshn4o, 노드 285:32565)의 구조와 간격을 준수할 것

1-2) 별점 기능
    - 기본 상태: 5개의 회색 별이 표시됨 (/icons/star.png 사용)
    - 별 클릭 시: 클릭한 별과 그 이전의 별들이 노란색으로 변경됨 (/icons/star_bright.png 사용)
    - 예: 3번째 별 클릭 시 → 1, 2, 3번째 별이 노란색, 4, 5번째 별은 회색
    - 별점 상태는 댓글 등록 시 함께 전송되어야 함
    - 댓글 등록 완료 후 별점을 초기 상태(모두 회색)로 리셋

1-3) 댓글 등록 기능
    - 라이브러리조건
        - 폼: 이미 설치되어있는 react-hook-form, @hookform/resolvers를 사용할 것.
        - 검증: 이미 설치되어있는 zod를 사용할 것.
    - 입력 필드 검증
        - 작성자 (writer): 필수 입력
        - 비밀번호 (password): 필수 입력
        - 내용 (contents): 필수 입력, 최대 100자 제한
        - 별점 (rating): 1~5 사이의 숫자, 필수 선택
    - 유저시나리오(댓글 등록하기)
        1. 댓글 등록 폼에 작성자, 비밀번호, 내용을 입력
        2. 별점을 선택 (1~5 중 하나)
        3. "댓글 등록" 버튼 클릭
        4. 입력값 검증 수행
        5. 검증 통과 시 댓글 등록 API 호출 (GraphQL mutation 사용)
        6. 등록 완료 후 폼 초기화 (작성자, 비밀번호, 내용, 별점 모두 초기화)
        7. 댓글 목록 새로고침하여 새로 등록된 댓글 표시

==============================================
2. GraphQL 스키마 명세 (등록)
==============================================

2-1) 댓글 등록 스키마
    - createBoardComment(createBoardCommentInput: CreateBoardCommentInput!, boardId: ID!): BoardComment!
    - CreateBoardCommentInput { writer: String, password: String, contents: String!, rating: Float! }
    - 로컬 규약: writer, password는 필수 입력으로 처리할 것

2-2) 별점 타입
    - rating은 Float로 처리하되 UI에서는 1~5 정수 스텝으로 입력받아 Float로 전달


