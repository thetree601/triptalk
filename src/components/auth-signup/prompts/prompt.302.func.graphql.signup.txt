아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @02-graphql.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/components/auth-signup/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/auth-signup/styles.module.css
조건-파일경로) 참고할 URL 파일경로: src/commons/constants/url.ts
조건-파일경로) 모달 프로바이더 경로: src/commons/providers/modal/modal.provider.tsx

조건-파일경로) GraphQL 타입 파일경로: src/lib/graphql/types/auth.ts
조건-파일경로) GraphQL 뮤테이션 파일경로: src/lib/graphql/mutations/auth.ts
조건-파일경로) GraphQL 클라이언트 파일경로: src/lib/apollo/client.ts

조건-파일경로) 훅 구현 파일경로: src/components/auth-signup/hooks/index.form.hook.tsx
조건-파일경로) 훅 테스트 파일경로: src/components/auth-signup/tests/index.form.hook.spec.ts

==============================================

사전조건) Apollo Client가 설정되어 있어야 함. (참고 프롬프트: src/commons/constants/prompts/prompt.105.apollo.client.setup.txt)

==============================================

핵심요구사항) 회원가입을 GraphQL(createUser)로 실제 서버에 요청하여 가능하도록 구현할 것.

1) GraphQL 스키마/타입/문서 구현
    - 파일: src/lib/graphql/types/auth.ts
      - User: { _id: string; name: string; email: string }
      - CreateUserInput: { email: string; password: string; name: string }
      - CreateUserResponse: { _id: string }

    - 파일: src/lib/graphql/mutations/auth.ts
      - createUser 뮤테이션 문서 정의
        입력: $createUserInput: CreateUserInput!
        반환: { _id }
      - export const CREATE_USER = gql`...`
      - 타입 안전을 위해 위 types를 함께 export/import 할 수 있도록 구성

2) 폼 훅 구현 (react-hook-form + zod + Apollo useMutation)
    - 파일: src/components/auth-signup/hooks/index.form.hook.tsx
      - zod 스키마
        email: 이메일 형식(@ 포함)
        password: 영문+숫자 포함 8자리 이상
        confirmPassword: password와 동일
        name: 최소 1글자 이상
      - react-hook-form(zodResolver)로 제어
      - Apollo useMutation(CREATE_USER) 사용
      - onSubmit에서 createUser({ variables: { createUserInput: { email, password, name } } }) 호출
      - 성공 시: 결과의 _id 존재 여부 확인 후 성공 플로우 진행
      - 실패 시: 에러 메시지 파싱하여 실패 플로우 진행

3) UI 연결
    - 파일: src/components/auth-signup/index.tsx
      - 기존 TODO로 남아있는 회원가입 로직을 훅으로 대체
      - 버튼 활성화/비활성화는 폼 상태에 연동(disabled, isSubmitting 등)

4) 모달/네비게이션 플로우
    - 모달은 modal.provider를 그대로 사용 (수정 금지)
    - 성공 모달: <Modal />, variant: 'info', actions: 'single', 메시지: "회원가입이 완료되었습니다."
      - 확인 클릭 시: 모든 모달 닫기 → 로그인 페이지(`/auth/login`)로 이동
    - 실패 모달: <Modal />, variant: 'danger', actions: 'single'
      - 확인 클릭 시: 모든 모달 닫기, 폼은 그대로 유지

5) 테스트 (Playwright 기반, TDD로 작성/통과)
    - 파일: src/components/auth-signup/tests/index.form.hook.spec.ts
    - /auth/signup 로드 후 data-testid 기반 고정식별자가 나타날 때까지 대기 (networkidle 금지)
    - 성공 시나리오(실서버 호출, 모킹 금지)
      - 이메일은 timestamp 포함하여 매번 신규 생성
      - createUser 응답 _id 존재 확인
      - 성공 모달 확인 → 로그인 페이지로 이동 검증
    - 실패 시나리오(API 모킹 허용)
      - 서버에서 에러 반환 시 실패 모달 노출 확인
    - 네트워크 통신이 있는 테스트의 timeout은 2000ms 미만, 없는 테스트는 500ms 미만 또는 미설정

6) 접근성/UX
    - 제출 중에는 버튼 비활성화 및 진행 상태 표시
    - 필드별 에러 메시지 노출 및 입력 변경 시 해당 에러 제거

7) 타입/품질
    - TypeScript 엄격 모드 하에서도 오류 없도록 타입 선언
    - 불필요한 try/catch 사용 금지, 의미 있는 에러 처리만 유지
    - 린터 경고/오류 없이 빌드 통과

==============================================

체크리스트)
    [ ] src/lib/graphql/types/auth.ts에 타입 정의 완료
    [ ] src/lib/graphql/mutations/auth.ts에 CREATE_USER 문서 정의/내보내기 완료
    [ ] useMutation(CREATE_USER)로 onSubmit에서 실제 서버 호출
    [ ] 성공 시 모달 → 모든 모달 닫기 → /auth/login 이동
    [ ] 실패 시 모달 표시 및 닫기 동작
    [ ] 폼 검증(zod) 및 버튼 활성화 로직 반영
    [ ] Playwright 테스트 성공/실패 시나리오 통과
    [ ] 린터/타입 에러 없음


