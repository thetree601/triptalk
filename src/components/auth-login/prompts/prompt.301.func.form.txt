아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @02-graphql.mdc
            - @03-ui.mdc

==============================================

조건-피그마) 활용할MCP: CursorTalkToFigmaMCP(채널명: ipsmlh0a)
조건-피그마) 구현될 컴포넌트 노드ID(로그인 페이지 전체 모습): 285:32713
조건-피그마) 구현될 컴포넌트 노드ID(로그인 박스 안의 모습): 285:32715

==============================================

조건-파일경로) UI TSX: src/components/auth-login/index.tsx
조건-파일경로) UI CSS: src/components/auth-login/styles.module.css
조건-파일경로) 폼 훅: src/components/auth-login/hooks/index.form.hook.tsx
조건-파일경로) 페이지 연결: src/app/auth/login/page.tsx

조건-파일경로) GraphQL 쿼리: src/lib/graphql/queries/auth.ts
조건-파일경로) GraphQL 뮤테이션: src/lib/graphql/mutations/auth.ts
조건-파일경로) GraphQL 타입: src/lib/graphql/types/auth.ts

조건-환경) Apollo 클라이언트는 이미 설정되어 있다고 가정. (필요 시 src/commons/constants/prompts/prompt.105.apollo.client.setup.txt 기준)

==============================================

핵심요구사항-1) GraphQL 인증 스키마/문서 정의를 구현할 것. (auth.ts 일괄 생성)
            1. 쿼리 (src/lib/graphql/queries/auth.ts)
                - fetchUserLoggedIn: 로그인된 사용자 정보 조회
                - 반환: { _id, name, email }
            2. 뮤테이션 (src/lib/graphql/mutations/auth.ts)
                - loginUser(input: { email, password }): { accessToken }
                - createUser(input: { email, password, name }): { _id }
            3. 타입 (src/lib/graphql/types/auth.ts)
                - User: { _id: string; name: string; email: string }
                - LoginInput: { email: string; password: string }
                - CreateUserInput: { email: string; password: string; name: string }
                - LoginResponse: { accessToken: string }
                - CreateUserResponse: { _id: string }
            4. 문서 작성 규칙
                - gql 템플릿 리터럴 사용, 변수/반환 타입 정의
            5. 에러 처리
                - GraphQL 에러/네트워크 에러 타입 정의 및 기본 처리 방안 포함

핵심요구사항-2) 로그인 폼 기능을 react-hook-form + zod + @tanstack/react-query로 구현할 것.
            1) 라이브러리
                - react-hook-form, @hookform/resolvers, zod, @tanstack/react-query 사용
            2) UX/검증
                - email: '@' 포함
                - password: 최소 1글자 이상
                - 모든 인풋 유효 시 로그인 버튼 활성화
            3) 액션 플로우
                - 로그인 버튼 클릭 → loginUser(email, password)
                    - 성공 시 accessToken 획득
                - accessToken 확보 후 → fetchUserLoggedIn 호출
                    - 요청 시 헤더: { Authorization: "Bearer <accessToken>" }
                    - 성공 시 { _id, name, email } 반환
                - 로컬스토리지 저장
                    - key "accessToken" → accessToken
                    - key "user" → JSON.stringify({ _id, name })
                - 성공 모달 노출 → 확인 시 라우팅 처리(메인 목록 페이지)
                    - 모달 사양: <Modal />, variant: 'info', actions: 'single', 메시지: "로그인 되었습니다"
                    - 확인 클릭 시: 모든 모달 닫기 → 메인 목록(URL_PATHS.TRIPPOSTS)로 이동
                - 실패 시 실패 모달 노출 → 확인 시 폼 유지 또는 에러 포커싱
            4) 에러/로딩
                - 버튼 로딩 상태, 폼 에러 메시지, 서버 에러 메시지 노출
                - 예외 케이스 대비 기본 오류 메시지 가이드

핵심요구사항-3) UI 구현
            - MCP를 통해 피그마 노드와 맞춘 레이아웃/타이포/컬러 적용
            - 글로벌 토큰(global.css) 변수 활용(하드코딩 금지)
            - 컴포넌트를 페이지에서 import하여 연결 (src/app/auth/login/page.tsx)

핵심요구사항-4) 테스트/모킹(선택)
            - 실패 시나리오용 API 모킹 가능 (네트워크 에러, 인증 실패)
            - 기본 유닛 검증(버튼 disabled/enable, 폼 유효성, 로컬스토리지 저장)

==============================================

산출물 체크리스트)
[ ] src/lib/graphql/types/auth.ts 정의 완료 (User, LoginInput, CreateUserInput, LoginResponse, CreateUserResponse)
[ ] src/lib/graphql/mutations/auth.ts에 loginUser, createUser 문서/타입 정의
[ ] src/lib/graphql/queries/auth.ts에 fetchUserLoggedIn 문서/타입 정의
[ ] src/components/auth-login/hooks/index.form.hook.tsx에 RHF+Zod+RQ 폼 로직 구현
[ ] 성공 시 accessToken, user({_id, name}) 로컬스토리지 저장
[ ] 실패/성공 모달 동작, 확인 시 라우팅 동작(성공 시 "로그인 되었습니다" 모달 → URL_PATHS.TRIPPOSTS 이동)
[ ] src/components/auth-login/index.tsx UI 피그마 반영 및 훅 연동
[ ] src/app/auth/login/page.tsx에서 컴포넌트 연결
[ ] 로딩/에러 상태 UX 반영
